{"version":3,"sources":["components/game/functionality/helperFunctions.ts","components/infoPopup/InfoPopup.tsx","components/resultsPopup/ResultsPopup.tsx","components/game/Game.tsx","App.js","reportWebVitals.js","index.js"],"names":["buttonState","actualState","gameState","ready","inProgress","finished","InfoPopup","trigger","Button","className","position","on","Card","title","ResultsPopup","props","ref","useRef","open","closeOnDocumentClick","onClose","closeModal","clickCountRef","current","type","onClick","close","classes","BEMHelper","name","Game","useState","timeElapsed","setTimeElapsed","setActualState","clickCount","setClickCount","setOpen","htmlFor","Row","id","toFixed","variant","setGameInProgress","GAME_DURATION_MS","timer","setInterval","setTimeout","clearInterval","gameStart","o","gameResults","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5781acc.chunk.js","sourcesContent":["import React from \"react\";\nimport {gameState} from \"../Game\";\n\nexport const gameStart = (timeElapsed: number, setTimeElapsed: React.Dispatch<React.SetStateAction<number>>,\n                          setGameInProgress: React.Dispatch<React.SetStateAction<number>>, GAME_DURATION_MS: number) => {\n    setGameInProgress(gameState.inProgress);\n    setTimeElapsed(0.0);\n\n    let timer = setInterval(() => {\n        setTimeElapsed(timeElapsed => timeElapsed + 0.1);\n    }, 100);\n\n    setTimeout(() => {\n        clearInterval(timer);\n        setGameInProgress(gameState.finished);\n    }, GAME_DURATION_MS + 1);\n}\n\nexport const gameResults = (setOpen: React.Dispatch<React.SetStateAction<boolean>>) => {\n    setOpen(o => !o);\n}\n\nexport const buttonState = (actualState: number) => {\n    switch (actualState) {\n        case gameState.ready: {\n            return 'Click to start!';\n        }\n        case gameState.inProgress: {\n            return 'Click here!';\n        }\n        case gameState.finished: {\n            return 'Restart the game!';\n        }\n    }\n}","import React from 'react';\nimport Popup from 'reactjs-popup';\nimport {Button} from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport 'reactjs-popup/dist/index.css';\nimport './InfoPopup.css';\n\nexport const InfoPopup = () => (\n    <Popup\n        trigger={\n            <Button className={'info-button'}>Info</Button>\n        }\n        position={'left top'}\n        on={['hover', 'focus']}\n    >\n        <Card title={'left top'}>Click as fast as you can for 10 seconds!</Card>\n    </Popup>\n);","import React, {useRef} from \"react\";\nimport {Button} from \"react-bootstrap\";\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\n\ninterface IResultsPopupPropsType {\n    open: boolean | undefined,\n    closeModal: any,\n    clickCountRef: React.MutableRefObject<number>\n}\n\nexport const ResultsPopup = (props: IResultsPopupPropsType) => {\n    const ref = useRef(null);\n    // @ts-ignore\n    const closeTooltip = () => ref.current.close();\n\n    return(\n        <Popup\n            open={props.open}\n            closeOnDocumentClick={false}\n            onClose={props.closeModal}\n            ref={ref}\n        >\n            <p>You have clicked {props.clickCountRef.current} times in total</p>\n            <p>Meaning {props.clickCountRef.current * 6} clicks per minute or {props.clickCountRef.current / 10} clicks per second</p>\n            <Button type=\"button\" className=\"button\" onClick={closeTooltip}>\n                close\n            </Button>\n        </Popup>\n    );\n}\n\n","import React, {useRef, useState} from 'react';\nimport './Game.css';\nimport BEMHelper from 'react-bem-helper';\nimport {Button, Row} from \"react-bootstrap\";\nimport {gameStart, gameResults, buttonState} from \"./functionality/helperFunctions\";\nimport {InfoPopup} from \"../infoPopup/InfoPopup\";\nimport {ResultsPopup} from \"../resultsPopup/ResultsPopup\";\n\nconst GAME_DURATION_MS = 10000;\n\nconst classes = new BEMHelper({\n    name: 'game'\n});\n\nexport const gameState = {\n    ready: 0,\n    inProgress: 1,\n    finished: 2\n}\n\n\nexport const Game: React.FC = () => {\n\n    const [timeElapsed, setTimeElapsed] = useState(0.0);\n    const [actualState, setActualState] = useState(0);\n    const [clickCount, setClickCount] = useState(0);\n\n    const [open, setOpen] = useState(false);\n    const closeModal = () => setOpen(false);\n\n    /**\n     * Using reference to be able to access actual value of clickCount\n     */\n    const clickCountRef = useRef(clickCount);\n    clickCountRef.current = clickCount;\n\n    const handleClick = () => {\n        switch (actualState) {\n            case gameState.ready: {\n                gameStart(timeElapsed, setTimeElapsed, setActualState, GAME_DURATION_MS);\n                setTimeout(() => {\n                    gameResults(setOpen);\n                }, GAME_DURATION_MS + 1);\n                break;\n            }\n            case gameState.inProgress: {\n                setClickCount((clickCount) => clickCount + 1);\n                break;\n            }\n            case gameState.finished: {\n                setTimeElapsed(0.0);\n                setClickCount(0);\n                setActualState(gameState.ready);\n                break;\n            }\n        }\n    }\n\n    return (\n        <div {...classes()}>\n            <div {...classes('info-popup-row')}><InfoPopup/></div>\n            <div {...classes('window')}>\n                <label htmlFor={'timer'}>Time elapsed:</label>\n                <Row\n                    {...classes('timer')}\n                    id={'timer'}>\n                    {timeElapsed.toFixed(1)}\n                </Row>\n                <label htmlFor={'clickCount'}>Clicks total:</label>\n                <Row\n                    {...classes('click-count')}\n                    id={'clickCount'}>\n                    {clickCount}\n                </Row>\n                <Button\n                    {...classes('button')}\n                    variant=\"primary\"\n                    onClick={handleClick}>\n                    {buttonState(actualState)}\n                </Button>\n            </div>\n            <ResultsPopup\n                open={open}\n                closeModal={closeModal}\n                clickCountRef={clickCountRef}/>\n        </div>\n    );\n};\n","import './App.css';\nimport {Game} from \"./components/game/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}